package test_es;

import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;

import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.SwingUtilities;

public class board {
    public static void addComponentsToPane(Container pane) {
        pane.setLayout(new GridLayout(1, 0));

        JPanel left = new JPanel();
        pane.add(left);
        left.setLayout(new BoxLayout(left, BoxLayout.Y_AXIS));

        JPanel leftTop = new JPanel(new GridBagLayout());
	   //leftTop.setPreferredSize(new Dimension(266, 300));
		leftTop.setBackground(Color.black);
		
		JScrollPane scrollPane = new JScrollPane(leftTop); //problem is here
		left.add(scrollPane);
		
		GridBagConstraints gbc = new GridBagConstraints();
		gbc.gridwidth = GridBagConstraints.REMAINDER;
        gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.weightx = 1;
		gbc.insets = new Insets(5, 10, 5, 10);
		JButton jb = new JButton();
		jb.setPreferredSize(new Dimension(250, 50));
		leftTop.add(jb, gbc);
		
		JButton jb1 = new JButton();
		jb1.setPreferredSize(new Dimension(250, 50));
		leftTop.add(jb1, gbc);
		
		JButton jb2 = new JButton();
		jb2.setPreferredSize(new Dimension(250, 50));
		leftTop.add(jb2, gbc);
		
		JButton jb3 = new JButton();
		jb3.setPreferredSize(new Dimension(250, 50));
		leftTop.add(jb3, gbc);
		
		JButton jb4 = new JButton();
		jb4.setPreferredSize(new Dimension(250, 50));
		leftTop.add(jb4, gbc);
		
		JButton jb5 = new JButton();
		jb5.setPreferredSize(new Dimension(250, 50));
		leftTop.add(jb5, gbc);
		
		JButton jb6 = new JButton();
		jb6.setPreferredSize(new Dimension(250, 50));
		leftTop.add(jb6, gbc);

	    JPanel leftBottom = new JPanel();
	    leftBottom.setPreferredSize(new Dimension(266, 300));
	    leftBottom.setBackground(Color.red);
	    left.add(leftBottom);
	
	    JPanel middle = new JPanel();
	    pane.add(middle);
	    middle.setLayout(new BoxLayout(middle, BoxLayout.Y_AXIS));
	
	    JPanel middleTop = new JPanel();
	    middleTop.setPreferredSize(new Dimension(266, 200));
	    middleTop.setBackground(Color.green);
	    middle.add(middleTop);
	
	    JPanel middleBottom = new JPanel();
	    middleBottom.setPreferredSize(new Dimension(266, 400));
	    middleBottom.setBackground(Color.yellow);
	    middle.add(middleBottom);
	
	    JPanel right = new JPanel();
	    right.setPreferredSize(new Dimension(266, 600));
	    right.setBackground(Color.blue);
	
	    pane.add(right);
    }

    private static void createAndShowGUI() {
        JFrame frame = new JFrame("GridBagLayoutDemo");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        addComponentsToPane(frame.getContentPane());
        frame.pack();
        frame.setVisible(true);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                createAndShowGUI();
            }
        });
    }
}

public class test1 extends JPanel {
    // This is a custom-written component, implemented
    // by extending JPanel. It displays a sequence of NUM_RECTS
    // rectangles in a white component.
    private static final int NUM_RECTS = 40;
    private static final int WIDTH = 200; // width of component
    private static final int HEIGHT = 200; // height of component
    private static final int SIZE = 30; // maximum size of rectangle

    // These two instance variables are for remembering information
    // about the rectangles inside the component
    private Rectangle[] rects = new Rectangle[NUM_RECTS];
    private Color[] colors = new Color[NUM_RECTS];

    public Canvas() {
        // this sets up the size of the panel, so it isn't just a
        // zero-size panel. It also sets up the background color.
        setPreferredSize(new Dimension(WIDTH, HEIGHT));
        setBackground(Color.white);

        // create random rectangles
        Random random = new Random();
        for(int i = 0; i < rects.length; i++) {
            switch(random.nextInt(3)) {
            case 0: colors[i] = Color.blue; break;
            case 1: colors[i] = Color.red; break;
            case 2: colors[i] = Color.green; break;
            }

            rects[i] = new Rectangle(random.nextInt(WIDTH - SIZE),
                random.nextInt(HEIGHT - SIZE), random.nextInt(SIZE),
                random.nextInt(SIZE));
        }
    }

    public void paintComponent(Graphics g) {
        // We're overriding JPanel's paintComponent method
        // so that we actually draw something whenever
        // the component is repainted.
        //
        // Note that a JPanel doesn't actually remember its contents
        // at all! We have to re-compute the contents of the JPanel
        // *every time* paintComponent is called.
        super.paintComponent(g); // (JPanel's paintComponent clears
                        // the panel with the background color.
                        // It's important that we call it to make
                        // this happen.)

        for(int i = 0; i < rects.length; i++) {
            g.setColor(colors[i]);
            g.fillRect(rects[i].x, rects[i].y,
                rects[i].width, rects[i].height);
        }
    }
}